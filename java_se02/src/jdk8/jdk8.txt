Lambda表达式
Lambda表达式是一个匿名函数(方法),我们可以把Lambda
表达式理解为是一段可以传递的代码,可以写出更简洁更灵活的
代码.作为一种更紧凑的代码风格,使Java语言的表达能力得到了
提升
函数式接口
方法引用与构造器引用
streamapi
接口中的默认方法与静态方法

Lambda表达式在Java语言中引入了一个新的与发放元素和操作符,这个操作是
"->",该操作符被称为Lambda操作符或者箭头符号,它将Lambda分为了两个部分:
左侧:指定了Lambda表达式需要的所有参数
右侧:指定了Lambda体,即Lambda表达式要执行的功能

Lambda需要一个函数式接口的支持
函数式接口:
接口中只有一个抽象方法的接口,称为函数式接口
可以使用注解@FunctionalInterface修饰,可以检查
该接口是否为函数式接口

JDK8内置的四大核心函数式接口
Consumer<T>:消费型接口
	void accept(T t)
Supplier<T>:供给型接口
	T get();
Function<T,R>:函数型接口
	R apply(T t);
Predicate(T):断言型接口
	boolean test(T);
如果不满足需求首先寻找他们的子接口,BiConsumer,BiFunction等
	
方法引用和构造器引用
方法引用:
若Lambda体中的内容已经有方法实现了,我们可以使用方法引用
三种语法格式:
对象::实例方法名
类::静态方法名
类::实例方法名

接口中的默认方法和静态方法